use super::Frame;
use crate::compression;
const FRAME_SIZE: usize = 636;
const DIFF_REGIONS_BOUNDARIES: [usize; 9] = [58, 58, 58, 84, 92, 100, 120, 152, 174];
const DIFF_REGIONS: [usize; 174] = [
    2, 8, 9, 15, 16, 22, 23, 25, 26, 32, 58, 79, 125, 128, 132, 159, 177, 186, 190, 192, 201, 202,
    203, 205, 206, 216, 219, 253, 258, 261, 262, 285, 286, 289, 304, 308, 315, 320, 321, 347, 365,
    380, 386, 389, 390, 413, 414, 451, 493, 508, 512, 543, 621, 625, 626, 631, 632, 636, 58, 69,
    71, 74, 75, 79, 177, 181, 183, 187, 190, 192, 201, 202, 203, 205, 206, 216, 304, 308, 315, 320,
    323, 330, 334, 338, 51, 53, 69, 76, 177, 183, 304, 307, 69, 70, 71, 77, 177, 181, 304, 307, 51,
    53, 69, 76, 177, 183, 185, 188, 206, 217, 304, 307, 310, 321, 322, 323, 336, 345, 441, 451, 51,
    53, 69, 76, 86, 90, 95, 97, 177, 183, 185, 188, 206, 210, 214, 218, 219, 227, 304, 307, 310,
    321, 322, 323, 346, 355, 416, 417, 441, 451, 477, 480, 51, 53, 69, 76, 177, 183, 206, 217, 304,
    307, 315, 319, 336, 345, 433, 441, 448, 452, 565, 572, 576, 584,
];
const DIFF_BYTES_BOUNDARIES: [usize; 9] = [336, 336, 336, 397, 415, 429, 492, 570, 639];
const DIFF_BYTES: [u8; 639] = [
    126, 126, 24, 60, 102, 66, 12, 28, 112, 112, 28, 12, 116, 116, 20, 20, 124, 104, 124, 124, 112,
    120, 44, 36, 124, 124, 128, 64, 64, 32, 32, 32, 32, 16, 16, 16, 16, 16, 8, 8, 4, 4, 4, 8, 48,
    64, 128, 128, 128, 128, 192, 96, 48, 24, 12, 132, 198, 98, 35, 51, 17, 145, 113, 241, 113, 145,
    17, 51, 35, 98, 198, 132, 12, 24, 48, 96, 192, 24, 100, 130, 2, 2, 2, 2, 2, 1, 128, 128, 128,
    48, 48, 192, 193, 193, 194, 4, 8, 16, 32, 64, 128, 128, 128, 128, 128, 64, 64, 64, 64, 32, 32,
    32, 32, 16, 16, 16, 16, 8, 8, 8, 8, 8, 196, 4, 196, 4, 196, 2, 194, 2, 194, 1, 1, 1, 1, 252,
    15, 1, 248, 14, 31, 109, 140, 148, 148, 164, 166, 249, 224, 255, 224, 249, 166, 164, 148, 148,
    140, 109, 31, 14, 248, 1, 15, 252, 192, 56, 4, 3, 12, 12, 12, 13, 1, 64, 160, 33, 34, 18, 17,
    17, 17, 9, 8, 8, 8, 8, 4, 4, 8, 8, 16, 16, 16, 16, 16, 17, 15, 1, 1, 170, 170, 255, 255, 195,
    191, 127, 3, 127, 191, 195, 255, 255, 170, 170, 31, 120, 192, 15, 56, 124, 219, 152, 20, 20,
    18, 50, 207, 3, 255, 3, 207, 50, 18, 20, 20, 152, 219, 124, 56, 15, 192, 120, 31, 16, 16, 16,
    16, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 2, 3, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 4, 4, 8, 8, 8, 8, 8, 7,
    2, 130, 135, 31, 7, 159, 7, 28, 7, 159, 7, 159, 7, 2, 130, 32, 16, 16, 16, 17, 11, 14, 12, 24,
    16, 49, 35, 98, 102, 68, 68, 71, 71, 71, 68, 68, 102, 98, 35, 49, 16, 24, 12, 6, 3, 1, 7, 8, 8,
    23, 15, 1, 2, 1, 15, 15, 2, 5, 8, 0, 128, 128, 64, 64, 64, 64, 32, 32, 32, 32, 4, 2, 2, 24, 96,
    128, 0, 60, 194, 1, 1, 4, 4, 2, 1, 0, 0, 0, 96, 96, 129, 130, 130, 132, 8, 16, 32, 64, 128, 0,
    128, 112, 25, 6, 24, 24, 24, 27, 3, 34, 36, 20, 18, 18, 18, 11, 5, 5, 9, 9, 128, 128, 8, 4, 2,
    1, 1, 2, 12, 30, 225, 0, 0, 1, 1, 128, 112, 12, 8, 4, 2, 2, 2, 4, 56, 28, 226, 1, 1, 128, 112,
    12, 128, 128, 8, 4, 2, 1, 1, 2, 12, 30, 225, 0, 0, 1, 1, 129, 128, 128, 0, 1, 225, 26, 6, 9,
    49, 53, 1, 138, 124, 128, 112, 12, 24, 6, 5, 152, 153, 132, 195, 124, 65, 65, 64, 32, 4, 4, 4,
    4, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 8, 4, 2, 1, 1, 2, 12, 248, 248, 248,
    248, 128, 128, 30, 225, 0, 0, 1, 1, 129, 128, 128, 0, 1, 1, 2, 67, 135, 7, 1, 184, 188, 190,
    159, 95, 95, 79, 76, 128, 112, 12, 24, 6, 5, 152, 153, 132, 67, 124, 65, 65, 64, 32, 61, 124,
    252, 252, 252, 252, 252, 60, 12, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 128, 128, 8, 4, 2,
    1, 1, 2, 12, 30, 225, 0, 0, 1, 1, 0, 1, 225, 26, 6, 9, 49, 53, 1, 138, 124, 128, 112, 12, 0, 0,
    0, 1, 4, 4, 4, 4, 2, 2, 2, 1, 1, 122, 122, 121, 121, 121, 121, 57, 49, 136, 136, 135, 128, 48,
    120, 124, 254, 255, 63, 7, 255, 255, 127, 127, 63, 62, 28, 24,
];

fn reconstruct_base_frame() -> Vec<u8> {
    let empty_screen = compression::CompactAnimation::construct_empty_frame(FRAME_SIZE);
    let regions = DIFF_REGIONS
        .iter()
        .take(DIFF_REGIONS_BOUNDARIES[0])
        .cloned()
        .collect::<Vec<_>>();
    let bytes = DIFF_BYTES
        .iter()
        .take(DIFF_BYTES_BOUNDARIES[0])
        .cloned()
        .collect::<Vec<_>>();
    let diff = compression::Diff::from_regions_and_diff(&regions, &bytes);
    diff.reconstruct_frame(&empty_screen)
}

fn reconstruct_frame(index: usize) -> Vec<u8> {
    let base_frame = reconstruct_base_frame();
    let regions = DIFF_REGIONS
        .iter()
        .take(DIFF_REGIONS_BOUNDARIES[index + 1])
        .skip(DIFF_REGIONS_BOUNDARIES[index])
        .cloned()
        .collect::<Vec<_>>();
    let bytes = DIFF_BYTES
        .iter()
        .take(DIFF_BYTES_BOUNDARIES[index + 1])
        .skip(DIFF_BYTES_BOUNDARIES[index])
        .cloned()
        .collect::<Vec<_>>();
    let diff = compression::Diff::from_regions_and_diff(&regions, &bytes);
    diff.reconstruct_frame(&base_frame)
}

pub(super) fn get_frame(frame: &Frame) -> Vec<u8> {
    let index = match *frame {
        Frame::Idle(index) => index,
        Frame::Prep => 5,
        Frame::Tap(index) => index + 6,
    };
    reconstruct_frame(index)
}
